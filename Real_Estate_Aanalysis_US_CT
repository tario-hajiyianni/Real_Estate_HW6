from pyspark.sql import SparkSession
from pyspark.sql.functions import col
from pyspark.ml.feature import VectorAssembler
from pyspark.ml.regression import LinearRegression
from pyspark.ml.evaluation import RegressionEvaluator
import matplotlib.pyplot as plt

# Create a SparkSession
spark = SparkSession.builder \
    .appName("RealEstateAnalysis") \
    .getOrCreate()

data_with_location = spark.read.csv("Real_Estate_HW6/data_with_location.csv", header=True, inferSchema=True)
data_without_location = spark.read.csv("Real_Estate_HW6/data_without_location.csv", header=True, inferSchema=True)

data_without_location = data_without_location.dropna(subset=["Assessed Value"])

assembler = VectorAssembler(inputCols=["Assessed Value"], outputCol="features")
data_without_location = assembler.transform(data_without_location)
lr = LinearRegression(featuresCol="features", labelCol="Sale Amount", regParam=0.1, elasticNetParam=0.0)
lr_model = lr.fit(data_without_location)
print("Coefficients: {}".format(lr_model.coefficients))
print("Intercept: {}".format(lr_model.intercept))

predictions = lr_model.transform(data_without_location)
evaluator = RegressionEvaluator(labelCol="Sale Amount", predictionCol="prediction", metricName="rmse")
rmse = evaluator.evaluate(predictions)
print("Root Mean Squared Error (RMSE):", rmse)

actual_predicted = predictions.select("Sale Amount", "prediction").toPandas()
plt.scatter(actual_predicted["Sale Amount"], actual_predicted["prediction"])
plt.xlabel("Actual Sale Amount")
plt.ylabel("Predicted Sale Amount")
plt.title("Actual vs. Predicted Sale Amounts")
plt.show()

spark.stop()
